---
import { ViewTransitions } from "astro:transitions";
import Navbar from "./_Navbar.svelte";
import Footer from "./_Footer.svelte";
import { navbar } from "../stores/layout";
import { getImage } from "astro:assets";
import { postImageImport } from "../helpers/images.mjs";
import { siteSettings as configSiteSettings } from "../config/site";
import { fetchSiteSettings } from "../helpers/notion.js";

const { title: propTitle, description: propDescription, cover } = Astro.props;
let optimizedCoverImage: any = null;

// Fetch site settings from Notion if available
let siteSettings = configSiteSettings;
const siteSettingsDbId = import.meta.env.VITE_SITE_SETTINGS_DB_ID;
const shouldFetchFromNotion = siteSettingsDbId && 
                             siteSettingsDbId !== 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';

if (shouldFetchFromNotion) {
  try {
    const notionSiteSettings = await fetchSiteSettings();
    if (notionSiteSettings) {
      siteSettings = notionSiteSettings;
    }
  } catch (error) {
    console.error("Error fetching site settings from Notion:", error);
  }
}

// Use prop values if provided, otherwise use site settings
const title = propTitle || siteSettings.title;
const description = propDescription || siteSettings.description;
const favicon = siteSettings.favicon || "/favicon.ico";
const metaTags = siteSettings.metaTags || "";
const metaKeywords = siteSettings.metaKeywords || "";

if (cover) {
  const { default: dynamicImg } = await postImageImport(cover);
  optimizedCoverImage = await getImage({ src: dynamicImg, width: 1920, height: 1080 });
}
---

<html lang="en">
  <head>
    <title>{title}</title>

    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {metaKeywords && <meta name="keywords" content={metaKeywords} />}
    
    <!-- Additional meta tags from Notion -->
    {metaTags && <Fragment set:html={metaTags} />}
    
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" />
    <link rel="icon" type="image/x-icon" sizes="any" href={favicon} />

    <style is:global>
      /* Code Block Styling Overrides */
      code {
        color: white !important;
      }
      li code {
        color: white !important;
      }
      blockquote code {
        color: white !important;
      }
      
      /* Notion Column Support */
      .notion-columns {
        display: flex;
        gap: 2rem;
        margin: 1.5rem 0;
      }
      .notion-column {
        flex: 1;
        min-width: 200px;
      }
      .notion-column h4 {
        margin-top: 0;
        font-size: 1.25rem;
        font-weight: 600;
      }
      @media (max-width: 768px) {
        .notion-columns {
          flex-direction: column;
        }
        .notion-column {
          margin-bottom: 1.5rem;
        }
      }
    </style>

    <style>
      body {
        display: flex;
        flex-direction: column;
        height: 100vh; /* Flex column with height 100vh so Footer is always on bottom, even without page content */
        margin: 0;
      }
    </style>

    <ViewTransitions />
    <style>
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
      @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
      }
      .transition-opacity {
        animation: fadeIn 0.5s ease-in-out;
      }
      .transition-opacity-out {
        animation: fadeOut 0.5s ease-in-out;
      }
    </style>

    <script is:inline>
      const colorTheme = localStorage.getItem("color-theme");
      const isDark = colorTheme === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");
    </script>
  </head>

  <body
    class="align-center flex h-screen w-screen flex-col overflow-x-hidden overflow-y-scroll bg-white dark:bg-gray-900 dark:text-white"
  >
    <!-- <HyperDark client:idle /> -->
    <Navbar client:load />

    <div class="flex-grow">
      <slot />
    </div>

    <!-- <ChromeNotification client:idle /> -->
    <Footer client:load />
  </body>
</html>

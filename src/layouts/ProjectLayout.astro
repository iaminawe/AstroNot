---
import Layout from "./Layout.astro";
import { getImage } from "astro:assets";
import ParallaxImageHeader from "../components/ParallaxImageHeader.svelte";
import { postImageImport } from "../helpers/images.mjs";
import Tags from "../components/Tags.astro";
import TableOfContents from "../components/TableOfContents.astro";
import LatestPosts from "../components/LatestPosts.astro";
import Newsletter from "../components/Newsletter.svelte";
import SocialLinks from "../components/SocialLinks.svelte";
import { author as authorData } from "../data/index.js";

const { frontmatter } = Astro.props;

const showProfileSubtitle = true; // TODO: Expose this as config option
let optimizedDesktopCoverImage = null;
let optimizedMobileCoverImage = null;

// Direct S3 URL detection
const isS3Url = (url) => {
  return typeof url === 'string' && (
    url.includes('s3.') || 
    url.includes('amazonaws.com') ||
    url.startsWith('https://greggcoppen.s3.')
  );
};

if (frontmatter?.cover) {
  try {
    // Check if it's an S3 URL first
    if (isS3Url(frontmatter.cover)) {
      // For S3 URLs, ensure we're using the correct folder prefix
      const url = new URL(frontmatter.cover);
      const pathParts = url.pathname.split('/');
      const filename = pathParts[pathParts.length - 1];
      
      // If it's a project image but in the wrong folder, fix the URL
      if (filename.startsWith('project-') && !url.pathname.includes('/projects/')) {
        const correctedPath = url.pathname.replace('/posts/', '/projects/');
        url.pathname = correctedPath;
        frontmatter.cover = url.toString();
      }
      
      // For S3 URLs, bypass Astro's image optimization
      optimizedDesktopCoverImage = {
        src: frontmatter.cover,
        width: 1920,
        height: 1080
      };
      
      optimizedMobileCoverImage = {
        src: frontmatter.cover,
        width: 720,
        height: 480
      };
    } else if (frontmatter.cover.startsWith('http')) {
      // For other external images, we can't use getImage
      optimizedDesktopCoverImage = {
        src: frontmatter.cover
      };
      
      optimizedMobileCoverImage = {
        src: frontmatter.cover
      };
    } else {
      // For local images
      const dynamicImg = await postImageImport(frontmatter.cover);
      
      if (dynamicImg && typeof dynamicImg === 'object' && 'default' in dynamicImg) {
        const imgData = dynamicImg.default;
        
        if (typeof imgData === 'object' && 'isS3' in imgData) {
          // S3 image from postImageImport
          optimizedDesktopCoverImage = {
            src: imgData.src,
            width: 1920,
            height: 1080
          };
          optimizedMobileCoverImage = {
            src: imgData.src,
            width: 720,
            height: 480
          };
        } else {
          // Local image
          const localImg = imgData as ImageMetadata;
          optimizedDesktopCoverImage = await getImage({ src: localImg, width: 1920, height: 1080 });
          optimizedMobileCoverImage = await getImage({ src: localImg, width: 720, height: 480 });
        }
      }
    }
  } catch (error) {
    console.error(`Error processing image for ${frontmatter.title}:`, error);
  }
}

const dateStr = frontmatter.publish_date 
  ? new Date(frontmatter.publish_date).toLocaleString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    })
  : "";
---

<Layout title={frontmatter.title}>
  {optimizedDesktopCoverImage && (
    <link rel="preload" href={optimizedDesktopCoverImage.src} as="image" fetchpriority="high" />
  )}
  {optimizedMobileCoverImage && (
    <link rel="preload" href={optimizedMobileCoverImage.src} as="image" fetchpriority="high" />
  )}
  <div
    style={`view-transition-name: cover-image-${frontmatter.id}; display:block;`}
  >
    {
      optimizedDesktopCoverImage && (
        <div class="relative h-fit">
          <ParallaxImageHeader
            mobileImage={optimizedMobileCoverImage.src}
            desktopImage={optimizedDesktopCoverImage.src}
            client:idle
          />
        </div>
      )
    }
  </div>

  <main class="pt-8 antialiased lg:pt-16">
    <div class="mx-auto flex max-w-screen-xl justify-center gap-12 px-4">
      <article
        class={`z-40 w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert overflow-x-hidden ${
          frontmatter.cover ? "lg:my-[-128px]" : ""
        } bg-white dark:bg-gray-800 dark:border-gray-700 outline outline-[20px] outline-white dark:outline-gray-800 rounded-sm lg:shadow-4xl lg:-mb-8`}
        style={`view-transition-name: cover-title-${frontmatter.id};`}
      >
        <header class="not-format mb-4 lg:mb-6">
          <!-- <address class="mb-6 flex items-center not-italic">
            <div
              class="mr-3 inline-flex items-center text-sm text-gray-900 dark:text-white"
            >
              <img
                class="mr-4 h-16 w-16 rounded-full"
                src={authorData.avatar}
                alt={authorData.name}
              />
              {
                showProfileSubtitle ? (
                  <div>
                    <a
                      href="#"
                      rel="author"
                      class="text-xl font-bold text-gray-900 dark:text-white"
                    >
                      {authorData.name}
                    </a>
                    <p class="text-base text-gray-500 dark:text-gray-400">
                      {authorData.bio}
                    </p>
                    {dateStr && (
                      <p class="text-base text-gray-500 dark:text-gray-400">
                        <time
                          datetime={frontmatter.created_time}
                          title={dateStr}
                        >
                          {dateStr}
                        </time>
                      </p>
                    )}
                    <div class="mt-2">
                      <SocialLinks size="sm" color="gray" client:load />
                    </div>
                  </div>
                ) : (
                  <div>
                    <a
                      href="#"
                      rel="author"
                      class="text-2xl font-bold text-gray-900 dark:text-white"
                    >
                      {authorData.name}
                    </a>
                    {dateStr && (
                      <p class="text-lg text-gray-500 dark:text-gray-400">
                        <time
                          datetime={frontmatter.created_time}
                          title={dateStr}
                        >
                          {dateStr}
                        </time>
                      </p>
                    )}
                  </div>
                )
              }
            </div>
          </address> -->

          <div
            class="mb-4 text-4xl font-extrabold leading-tight text-gray-900 dark:text-white sm:text-[2.66rem] lg:mb-6 lg:text-[3.33rem]"
          >
            {frontmatter.title}
          </div>

          {frontmatter.tags && <Tags tags={frontmatter.tags} divClass="mb-[-10px] mt-[-10px]" />}
        </header>

        <slot />
      </article>

      {
        Astro.props.headings && Astro.props.headings.length > 0 && (
          <aside class="hidden xl:block xl:w-[350px]">
            <TableOfContents
              headings={Astro.props.headings}
              cardClass="format -mt-8 h-fit w-fit !p-4 !pb-0 sticky top-0 w-full"
            />
          </aside>
        )
      }
    </div>

    <LatestPosts />
    <Newsletter client:load />
  </main>
</Layout>

<style is:global>
  code {
    color: white !important;
  }
  li code {
    color: white !important;
  }
  blockquote code {
    color: white !important;
  }
</style>

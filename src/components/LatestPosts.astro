---
import { Image, getImage } from "astro:assets";
import { postImageImport } from "../helpers/images.mjs";
import type { ImageMetadata } from "astro";

interface Frontmatter {
  title?: string;
  cover?: string;
  slug?: string;
  id?: string;
  reading_time?: string;
  description?: string;
  publish_date?: string;
}

interface Post {
  frontmatter: Frontmatter;
}

interface ImageData {
  default: {
    src: string;
    width: number;
    height: number;
    format: string;
    isS3?: boolean;
    isRemote?: boolean;
  };
}

// Get all posts and handle missing publish_date
const posts = await import.meta.glob<Post>("../pages/posts/*.mdx", { eager: true });
const allPosts = Object.values(posts);

// Filter and sort posts safely
const latestPosts = allPosts
  .filter((post): post is Post => post.frontmatter && typeof post.frontmatter === 'object')
  .sort((a, b) => {
    // Use a default date if publish_date is missing
    const dateA = a.frontmatter.publish_date ? new Date(a.frontmatter.publish_date).getTime() : 0;
    const dateB = b.frontmatter.publish_date ? new Date(b.frontmatter.publish_date).getTime() : 0;
    return dateB - dateA;
  })
  .slice(0, 4);

interface Props {
  fullWidth?: boolean;
  animated?: boolean;
}

const { fullWidth = true, animated = false } = Astro.props;
---

<aside
  aria-label="Related articles"
  class={`mt-12 bg-gray-50 py-8 dark:bg-gray-800 dark:bg-opacity-80 lg:mt-0  ${
    !fullWidth ? "mx-auto max-w-screen-xl rounded-lg lg:py-12" : "lg:py-24"
  }`}
>
  <div class="mx-auto max-w-screen-xl px-4">
    <h2
      class="-mt-4 mb-8 pl-2 text-3xl font-bold text-gray-900 dark:text-white"
    >
      Latest Articles
    </h2>
    <div class="grid gap-12 sm:grid-cols-2 lg:grid-cols-4">
      {
        latestPosts.map(async (post) => {
          // Safely extract frontmatter properties with defaults
          const frontmatter = post.frontmatter || {};
          const title = frontmatter.title || "Untitled Post";
          const cover = frontmatter.cover;
          const slug = frontmatter.slug || "";
          const id = frontmatter.id;
          const reading_time = frontmatter.reading_time || "1 min read";
          const description = frontmatter.description || "";
          
          let coverImageSrc = "";
          let preloadCoverImageSrc = "";
          let preloadCoverImageMobileSrc = "";

          if (cover) {
            try {
              const imageFilePath = (await postImageImport(cover)).default;
              
              // If it's a remote image (S3 or external), use the URL directly
              if (imageFilePath.isS3 || imageFilePath.isRemote) {
                coverImageSrc = imageFilePath.src;
                preloadCoverImageSrc = imageFilePath.src;
                preloadCoverImageMobileSrc = imageFilePath.src;
              } else {
                // For local images, use getImage
                coverImageSrc = (
                  await getImage({
                    src: imageFilePath as ImageMetadata,
                    width: 452,
                  })
                ).src;

                preloadCoverImageSrc = (
                  await getImage({
                    src: imageFilePath as ImageMetadata,
                    width: 1920,
                    height: 1080,
                  })
                ).src;

                preloadCoverImageMobileSrc = (
                  await getImage({
                    src: imageFilePath as ImageMetadata,
                    width: 720,
                    height: 480,
                  })
                ).src;
              }
            } catch (error) {
              console.error(`Error processing image for ${title}:`, error);
            }
          }

          return (
            <article class="max-w-xs">
              {cover && coverImageSrc && (
                <>
                  <a href={`/posts/${slug}`}>
                    <img
                      src={coverImageSrc}
                      class="mb-5 max-h-[127px] rounded-lg object-cover"
                      alt={`${title} image`}
                      width={452}
                      style={
                        animated && id
                          ? `view-transition-name: cover-image-${id}; contain: layout;`
                          : ""
                      }
                    />
                  </a>

                  {preloadCoverImageSrc && (
                    <link rel="prefetch" href={preloadCoverImageSrc} as="image" />
                  )}
                  {preloadCoverImageMobileSrc && (
                    <link
                      rel="prefetch"
                      href={preloadCoverImageMobileSrc}
                      as="image"
                    />
                  )}
                </>
              )}
              <div
                style={
                  animated && id
                    ? `view-transition-name: cover-title-${id}; contain: layout;`
                    : ""
                }
              >
                <h2 class="mb-2 text-xl font-bold leading-tight text-gray-900 dark:text-white ">
                  <a href={`/posts/${slug}`}>{title}</a>
                </h2>
                <p class="mb-4 text-gray-500 dark:text-gray-400">
                  {description && description !== "undefined" ? description : ""}
                </p>
                <a
                  href={`/posts/${slug}`}
                  class="inline-flex items-center font-medium text-primary-600 underline underline-offset-4 hover:no-underline dark:text-secondary-500"
                >
                  Read in {reading_time ? reading_time.replace(" read", "") : "1 min"}
                </a>
              </div>
            </article>
          );
        })
      }
    </div>
  </div>
</aside>

---
import { Image, getImage } from "astro:assets";
import { postImageImport } from "../helpers/images.mjs";
import CaseStudiesCarousel from "./CaseStudiesCarousel.svelte";
import type { ImageMetadata } from "astro";

interface Post {
  frontmatter: {
    title?: string;
    cover?: string;
    slug?: string;
    description?: string;
    publish_date?: string;
    tags?: Array<{ name: string }>;
  };
}

// Get all posts
const posts = await import.meta.glob<Post>("../pages/posts/*.mdx", { eager: true });
const allPosts = Object.values(posts);

// Filter posts that have the "Article" tag
const projectPosts = await Promise.all(
  allPosts
    .filter((post) => {
      const { tags } = post.frontmatter;
      
      // Check if post has the Article tag
      const hasArticleTag = tags && tags.some(tag => 
        tag.name && tag.name === "Article"
      );
      
      return hasArticleTag;
    })
    .sort(
      (a, b) => {
        const dateA = a.frontmatter.publish_date ? new Date(a.frontmatter.publish_date).getTime() : 0;
        const dateB = b.frontmatter.publish_date ? new Date(b.frontmatter.publish_date).getTime() : 0;
        return dateB - dateA;
      }
    )
    .slice(0, 3) // Get top 3 most recent project posts
    .map(async (post) => {
      const { title, cover, slug, description } = post.frontmatter;
      
      // Process the cover image
      let coverImageSrc = "";
      if (cover) {
        try {
          const imageFilePath = (await postImageImport(cover)).default;
          
          // If it's a remote image (S3 or external), use the URL directly
          if (imageFilePath.isS3 || imageFilePath.isRemote) {
            coverImageSrc = imageFilePath.src;
          } else {
            // For local images, use getImage
            coverImageSrc = (
              await getImage({
                src: imageFilePath as ImageMetadata,
                width: 1200,
                height: 600
              })
            ).src;
          }
        } catch (error) {
          console.error(`Error processing image for ${title}:`, error);
        }
      }
      
      // Return the processed post data
      return {
        title: title || "Untitled Post",
        description: description || "",
        coverImage: coverImageSrc,
        url: `/posts/${slug || ""}`
      };
    })
);
---

{/* Preload images for better performance in Safari */}
{projectPosts.map((post) => (
  <link rel="preload" href={post.coverImage} as="image" />
))}

<CaseStudiesCarousel client:load projectPosts={projectPosts} />

---
import { Image as AstroImage } from "astro:assets";
import { postImageImport } from "../helpers/images.mjs";

const {
  src,
  MAX_WIDTH = 1400, // 2x max width of blog section width (2x for retina devices). Max width on Medium is 680px, so target that as max width for articles.
  imageClass = "w-full bg-gray-100",
  source = "internal", // Switch between internal relative URLs and external link sources
  alt = "Blog Image",
} = Astro.props;

// Determine image type from path or URL
let imageType = 'posts';
if (src.includes('/projects/') || src.includes('project-')) {
  imageType = 'projects';
} else if (src.includes('/author/') || src.includes('author-')) {
  imageType = 'author';
} else if (src.includes('/about/') || src.includes('about-')) {
  imageType = 'about';
}

// Check if it's an S3 URL
const isS3Url = typeof src === 'string' && (src.includes('.s3.') || src.includes('s3.amazonaws.com'));

let imgSrc = src;
let width = MAX_WIDTH;
let height = Math.round(MAX_WIDTH * 0.5625); // 16:9 aspect ratio

if (!isS3Url) {
  // For local images, use postImageImport with the correct type
  const { default: importedData } = await postImageImport(src, imageType);
  imgSrc = importedData.src;
  width = importedData.width;
  height = importedData.height;
}
---

{
  isS3Url ? (
    <img src={imgSrc} alt={alt} class={imageClass} style="will-change: opacity;" />
  ) : (
    <AstroImage
      src={imgSrc}
      {alt}
      class={imageClass}
      width={width < MAX_WIDTH ? width : MAX_WIDTH}
      height={height}
      style="will-change: opacity;"
    />
  )
}
